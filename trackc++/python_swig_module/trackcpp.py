# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_trackcpp', [dirname(__file__)])
        except ImportError:
            import _trackcpp
            return _trackcpp
        if fp is not None:
            try:
                _mod = imp.load_module('_trackcpp', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _trackcpp = swig_import_helper()
    del swig_import_helper
else:
    import _trackcpp
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _trackcpp.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _trackcpp.SwigPyIterator_value(self)
    def incr(self, n=1): return _trackcpp.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _trackcpp.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _trackcpp.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _trackcpp.SwigPyIterator_equal(self, *args)
    def copy(self): return _trackcpp.SwigPyIterator_copy(self)
    def next(self): return _trackcpp.SwigPyIterator_next(self)
    def __next__(self): return _trackcpp.SwigPyIterator___next__(self)
    def previous(self): return _trackcpp.SwigPyIterator_previous(self)
    def advance(self, *args): return _trackcpp.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _trackcpp.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _trackcpp.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _trackcpp.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _trackcpp.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _trackcpp.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _trackcpp.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _trackcpp.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class Element(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Element, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Element, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fam_name"] = _trackcpp.Element_fam_name_set
    __swig_getmethods__["fam_name"] = _trackcpp.Element_fam_name_get
    if _newclass:fam_name = _swig_property(_trackcpp.Element_fam_name_get, _trackcpp.Element_fam_name_set)
    __swig_setmethods__["pass_method"] = _trackcpp.Element_pass_method_set
    __swig_getmethods__["pass_method"] = _trackcpp.Element_pass_method_get
    if _newclass:pass_method = _swig_property(_trackcpp.Element_pass_method_get, _trackcpp.Element_pass_method_set)
    __swig_setmethods__["length"] = _trackcpp.Element_length_set
    __swig_getmethods__["length"] = _trackcpp.Element_length_get
    if _newclass:length = _swig_property(_trackcpp.Element_length_get, _trackcpp.Element_length_set)
    __swig_setmethods__["nr_steps"] = _trackcpp.Element_nr_steps_set
    __swig_getmethods__["nr_steps"] = _trackcpp.Element_nr_steps_get
    if _newclass:nr_steps = _swig_property(_trackcpp.Element_nr_steps_get, _trackcpp.Element_nr_steps_set)
    __swig_setmethods__["hkick"] = _trackcpp.Element_hkick_set
    __swig_getmethods__["hkick"] = _trackcpp.Element_hkick_get
    if _newclass:hkick = _swig_property(_trackcpp.Element_hkick_get, _trackcpp.Element_hkick_set)
    __swig_setmethods__["vkick"] = _trackcpp.Element_vkick_set
    __swig_getmethods__["vkick"] = _trackcpp.Element_vkick_get
    if _newclass:vkick = _swig_property(_trackcpp.Element_vkick_get, _trackcpp.Element_vkick_set)
    __swig_setmethods__["angle"] = _trackcpp.Element_angle_set
    __swig_getmethods__["angle"] = _trackcpp.Element_angle_get
    if _newclass:angle = _swig_property(_trackcpp.Element_angle_get, _trackcpp.Element_angle_set)
    __swig_setmethods__["angle_in"] = _trackcpp.Element_angle_in_set
    __swig_getmethods__["angle_in"] = _trackcpp.Element_angle_in_get
    if _newclass:angle_in = _swig_property(_trackcpp.Element_angle_in_get, _trackcpp.Element_angle_in_set)
    __swig_setmethods__["angle_out"] = _trackcpp.Element_angle_out_set
    __swig_getmethods__["angle_out"] = _trackcpp.Element_angle_out_get
    if _newclass:angle_out = _swig_property(_trackcpp.Element_angle_out_get, _trackcpp.Element_angle_out_set)
    __swig_setmethods__["gap"] = _trackcpp.Element_gap_set
    __swig_getmethods__["gap"] = _trackcpp.Element_gap_get
    if _newclass:gap = _swig_property(_trackcpp.Element_gap_get, _trackcpp.Element_gap_set)
    __swig_setmethods__["fint_in"] = _trackcpp.Element_fint_in_set
    __swig_getmethods__["fint_in"] = _trackcpp.Element_fint_in_get
    if _newclass:fint_in = _swig_property(_trackcpp.Element_fint_in_get, _trackcpp.Element_fint_in_set)
    __swig_setmethods__["fint_out"] = _trackcpp.Element_fint_out_set
    __swig_getmethods__["fint_out"] = _trackcpp.Element_fint_out_get
    if _newclass:fint_out = _swig_property(_trackcpp.Element_fint_out_get, _trackcpp.Element_fint_out_set)
    __swig_setmethods__["thin_KL"] = _trackcpp.Element_thin_KL_set
    __swig_getmethods__["thin_KL"] = _trackcpp.Element_thin_KL_get
    if _newclass:thin_KL = _swig_property(_trackcpp.Element_thin_KL_get, _trackcpp.Element_thin_KL_set)
    __swig_setmethods__["thin_SL"] = _trackcpp.Element_thin_SL_set
    __swig_getmethods__["thin_SL"] = _trackcpp.Element_thin_SL_get
    if _newclass:thin_SL = _swig_property(_trackcpp.Element_thin_SL_get, _trackcpp.Element_thin_SL_set)
    __swig_setmethods__["frequency"] = _trackcpp.Element_frequency_set
    __swig_getmethods__["frequency"] = _trackcpp.Element_frequency_get
    if _newclass:frequency = _swig_property(_trackcpp.Element_frequency_get, _trackcpp.Element_frequency_set)
    __swig_setmethods__["voltage"] = _trackcpp.Element_voltage_set
    __swig_getmethods__["voltage"] = _trackcpp.Element_voltage_get
    if _newclass:voltage = _swig_property(_trackcpp.Element_voltage_get, _trackcpp.Element_voltage_set)
    __swig_setmethods__["polynom_a"] = _trackcpp.Element_polynom_a_set
    __swig_getmethods__["polynom_a"] = _trackcpp.Element_polynom_a_get
    if _newclass:polynom_a = _swig_property(_trackcpp.Element_polynom_a_get, _trackcpp.Element_polynom_a_set)
    __swig_setmethods__["polynom_b"] = _trackcpp.Element_polynom_b_set
    __swig_getmethods__["polynom_b"] = _trackcpp.Element_polynom_b_get
    if _newclass:polynom_b = _swig_property(_trackcpp.Element_polynom_b_get, _trackcpp.Element_polynom_b_set)
    __swig_setmethods__["kicktable"] = _trackcpp.Element_kicktable_set
    __swig_getmethods__["kicktable"] = _trackcpp.Element_kicktable_get
    if _newclass:kicktable = _swig_property(_trackcpp.Element_kicktable_get, _trackcpp.Element_kicktable_set)
    __swig_setmethods__["hmax"] = _trackcpp.Element_hmax_set
    __swig_getmethods__["hmax"] = _trackcpp.Element_hmax_get
    if _newclass:hmax = _swig_property(_trackcpp.Element_hmax_get, _trackcpp.Element_hmax_set)
    __swig_setmethods__["vmax"] = _trackcpp.Element_vmax_set
    __swig_getmethods__["vmax"] = _trackcpp.Element_vmax_get
    if _newclass:vmax = _swig_property(_trackcpp.Element_vmax_get, _trackcpp.Element_vmax_set)
    __swig_setmethods__["t_in"] = _trackcpp.Element_t_in_set
    __swig_getmethods__["t_in"] = _trackcpp.Element_t_in_get
    if _newclass:t_in = _swig_property(_trackcpp.Element_t_in_get, _trackcpp.Element_t_in_set)
    __swig_setmethods__["t_out"] = _trackcpp.Element_t_out_set
    __swig_getmethods__["t_out"] = _trackcpp.Element_t_out_get
    if _newclass:t_out = _swig_property(_trackcpp.Element_t_out_get, _trackcpp.Element_t_out_set)
    __swig_setmethods__["r_in"] = _trackcpp.Element_r_in_set
    __swig_getmethods__["r_in"] = _trackcpp.Element_r_in_get
    if _newclass:r_in = _swig_property(_trackcpp.Element_r_in_get, _trackcpp.Element_r_in_set)
    __swig_setmethods__["r_out"] = _trackcpp.Element_r_out_set
    __swig_getmethods__["r_out"] = _trackcpp.Element_r_out_get
    if _newclass:r_out = _swig_property(_trackcpp.Element_r_out_get, _trackcpp.Element_r_out_set)
    def __init__(self, fam_name_="", length_=0): 
        this = _trackcpp.new_Element(fam_name_, length_)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["marker"] = lambda x: _trackcpp.Element_marker
    if _newclass:marker = staticmethod(_trackcpp.Element_marker)
    __swig_getmethods__["bpm"] = lambda x: _trackcpp.Element_bpm
    if _newclass:bpm = staticmethod(_trackcpp.Element_bpm)
    __swig_getmethods__["hcorrector"] = lambda x: _trackcpp.Element_hcorrector
    if _newclass:hcorrector = staticmethod(_trackcpp.Element_hcorrector)
    __swig_getmethods__["vcorrector"] = lambda x: _trackcpp.Element_vcorrector
    if _newclass:vcorrector = staticmethod(_trackcpp.Element_vcorrector)
    __swig_getmethods__["corrector"] = lambda x: _trackcpp.Element_corrector
    if _newclass:corrector = staticmethod(_trackcpp.Element_corrector)
    __swig_getmethods__["drift"] = lambda x: _trackcpp.Element_drift
    if _newclass:drift = staticmethod(_trackcpp.Element_drift)
    __swig_getmethods__["rbend"] = lambda x: _trackcpp.Element_rbend
    if _newclass:rbend = staticmethod(_trackcpp.Element_rbend)
    __swig_getmethods__["quadrupole"] = lambda x: _trackcpp.Element_quadrupole
    if _newclass:quadrupole = staticmethod(_trackcpp.Element_quadrupole)
    __swig_getmethods__["sextupole"] = lambda x: _trackcpp.Element_sextupole
    if _newclass:sextupole = staticmethod(_trackcpp.Element_sextupole)
    __swig_getmethods__["rfcavity"] = lambda x: _trackcpp.Element_rfcavity
    if _newclass:rfcavity = staticmethod(_trackcpp.Element_rfcavity)
    __swig_destroy__ = _trackcpp.delete_Element
    __del__ = lambda self : None;
Element_swigregister = _trackcpp.Element_swigregister
Element_swigregister(Element)
cvar = _trackcpp.cvar
Element.default_polynom = _trackcpp.cvar.Element_default_polynom

def Element_marker(*args):
  return _trackcpp.Element_marker(*args)
Element_marker = _trackcpp.Element_marker

def Element_bpm(*args):
  return _trackcpp.Element_bpm(*args)
Element_bpm = _trackcpp.Element_bpm

def Element_hcorrector(*args):
  return _trackcpp.Element_hcorrector(*args)
Element_hcorrector = _trackcpp.Element_hcorrector

def Element_vcorrector(*args):
  return _trackcpp.Element_vcorrector(*args)
Element_vcorrector = _trackcpp.Element_vcorrector

def Element_corrector(*args):
  return _trackcpp.Element_corrector(*args)
Element_corrector = _trackcpp.Element_corrector

def Element_drift(*args):
  return _trackcpp.Element_drift(*args)
Element_drift = _trackcpp.Element_drift

def Element_rbend(*args):
  return _trackcpp.Element_rbend(*args)
Element_rbend = _trackcpp.Element_rbend

def Element_quadrupole(*args):
  return _trackcpp.Element_quadrupole(*args)
Element_quadrupole = _trackcpp.Element_quadrupole

def Element_sextupole(*args):
  return _trackcpp.Element_sextupole(*args)
Element_sextupole = _trackcpp.Element_sextupole

def Element_rfcavity(*args):
  return _trackcpp.Element_rfcavity(*args)
Element_rfcavity = _trackcpp.Element_rfcavity

class Kick(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Kick, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Kick, name)
    __repr__ = _swig_repr
    __swig_setmethods__["hkick"] = _trackcpp.Kick_hkick_set
    __swig_getmethods__["hkick"] = _trackcpp.Kick_hkick_get
    if _newclass:hkick = _swig_property(_trackcpp.Kick_hkick_get, _trackcpp.Kick_hkick_set)
    __swig_setmethods__["vkick"] = _trackcpp.Kick_vkick_set
    __swig_getmethods__["vkick"] = _trackcpp.Kick_vkick_get
    if _newclass:vkick = _swig_property(_trackcpp.Kick_vkick_get, _trackcpp.Kick_vkick_set)
    __swig_setmethods__["status"] = _trackcpp.Kick_status_set
    __swig_getmethods__["status"] = _trackcpp.Kick_status_get
    if _newclass:status = _swig_property(_trackcpp.Kick_status_get, _trackcpp.Kick_status_set)
    def __init__(self): 
        this = _trackcpp.new_Kick()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _trackcpp.delete_Kick
    __del__ = lambda self : None;
Kick_swigregister = _trackcpp.Kick_swigregister
Kick_swigregister(Kick)

class Kicktable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Kicktable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Kicktable, name)
    __repr__ = _swig_repr
    __swig_setmethods__["filename"] = _trackcpp.Kicktable_filename_set
    __swig_getmethods__["filename"] = _trackcpp.Kicktable_filename_get
    if _newclass:filename = _swig_property(_trackcpp.Kicktable_filename_get, _trackcpp.Kicktable_filename_set)
    __swig_setmethods__["length"] = _trackcpp.Kicktable_length_set
    __swig_getmethods__["length"] = _trackcpp.Kicktable_length_get
    if _newclass:length = _swig_property(_trackcpp.Kicktable_length_get, _trackcpp.Kicktable_length_set)
    __swig_setmethods__["x_nrpts"] = _trackcpp.Kicktable_x_nrpts_set
    __swig_getmethods__["x_nrpts"] = _trackcpp.Kicktable_x_nrpts_get
    if _newclass:x_nrpts = _swig_property(_trackcpp.Kicktable_x_nrpts_get, _trackcpp.Kicktable_x_nrpts_set)
    __swig_setmethods__["y_nrpts"] = _trackcpp.Kicktable_y_nrpts_set
    __swig_getmethods__["y_nrpts"] = _trackcpp.Kicktable_y_nrpts_get
    if _newclass:y_nrpts = _swig_property(_trackcpp.Kicktable_y_nrpts_get, _trackcpp.Kicktable_y_nrpts_set)
    __swig_setmethods__["x_min"] = _trackcpp.Kicktable_x_min_set
    __swig_getmethods__["x_min"] = _trackcpp.Kicktable_x_min_get
    if _newclass:x_min = _swig_property(_trackcpp.Kicktable_x_min_get, _trackcpp.Kicktable_x_min_set)
    __swig_setmethods__["x_max"] = _trackcpp.Kicktable_x_max_set
    __swig_getmethods__["x_max"] = _trackcpp.Kicktable_x_max_get
    if _newclass:x_max = _swig_property(_trackcpp.Kicktable_x_max_get, _trackcpp.Kicktable_x_max_set)
    __swig_setmethods__["y_min"] = _trackcpp.Kicktable_y_min_set
    __swig_getmethods__["y_min"] = _trackcpp.Kicktable_y_min_get
    if _newclass:y_min = _swig_property(_trackcpp.Kicktable_y_min_get, _trackcpp.Kicktable_y_min_set)
    __swig_setmethods__["y_max"] = _trackcpp.Kicktable_y_max_set
    __swig_getmethods__["y_max"] = _trackcpp.Kicktable_y_max_get
    if _newclass:y_max = _swig_property(_trackcpp.Kicktable_y_max_get, _trackcpp.Kicktable_y_max_set)
    __swig_setmethods__["x_kick"] = _trackcpp.Kicktable_x_kick_set
    __swig_getmethods__["x_kick"] = _trackcpp.Kicktable_x_kick_get
    if _newclass:x_kick = _swig_property(_trackcpp.Kicktable_x_kick_get, _trackcpp.Kicktable_x_kick_set)
    __swig_setmethods__["y_kick"] = _trackcpp.Kicktable_y_kick_set
    __swig_getmethods__["y_kick"] = _trackcpp.Kicktable_y_kick_get
    if _newclass:y_kick = _swig_property(_trackcpp.Kicktable_y_kick_get, _trackcpp.Kicktable_y_kick_set)
    def __init__(self, filename_=""): 
        this = _trackcpp.new_Kicktable(filename_)
        try: self.this.append(this)
        except: self.this = this
    def load_from_file(self, *args): return _trackcpp.Kicktable_load_from_file(self, *args)
    def get_idx(self, *args): return _trackcpp.Kicktable_get_idx(self, *args)
    def get_x(self, *args): return _trackcpp.Kicktable_get_x(self, *args)
    def get_y(self, *args): return _trackcpp.Kicktable_get_y(self, *args)
    def interpolate_kicks(self, *args): return _trackcpp.Kicktable_interpolate_kicks(self, *args)
    __swig_destroy__ = _trackcpp.delete_Kicktable
    __del__ = lambda self : None;
Kicktable_swigregister = _trackcpp.Kicktable_swigregister
Kicktable_swigregister(Kicktable)


def add_kicktable(*args):
  return _trackcpp.add_kicktable(*args)
add_kicktable = _trackcpp.add_kicktable

def del_kicktables(*args):
  return _trackcpp.del_kicktables(*args)
del_kicktables = _trackcpp.del_kicktables
class PassMethod(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PassMethod, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PassMethod, name)
    __repr__ = _swig_repr
    pm_identity_pass = _trackcpp.PassMethod_pm_identity_pass
    pm_drift_pass = _trackcpp.PassMethod_pm_drift_pass
    pm_str_mpole_symplectic4_pass = _trackcpp.PassMethod_pm_str_mpole_symplectic4_pass
    pm_bnd_mpole_symplectic4_pass = _trackcpp.PassMethod_pm_bnd_mpole_symplectic4_pass
    pm_corrector_pass = _trackcpp.PassMethod_pm_corrector_pass
    pm_cavity_pass = _trackcpp.PassMethod_pm_cavity_pass
    pm_thinquad_pass = _trackcpp.PassMethod_pm_thinquad_pass
    pm_thinsext_pass = _trackcpp.PassMethod_pm_thinsext_pass
    pm_kicktable_pass = _trackcpp.PassMethod_pm_kicktable_pass
    pm_nr_pms = _trackcpp.PassMethod_pm_nr_pms
    def __init__(self): 
        this = _trackcpp.new_PassMethod()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _trackcpp.delete_PassMethod
    __del__ = lambda self : None;
PassMethod_swigregister = _trackcpp.PassMethod_swigregister
PassMethod_swigregister(PassMethod)

class Status(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Status, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Status, name)
    __repr__ = _swig_repr
    success = _trackcpp.Status_success
    passmethod_not_defined = _trackcpp.Status_passmethod_not_defined
    passmethod_not_implemented = _trackcpp.Status_passmethod_not_implemented
    particle_lost = _trackcpp.Status_particle_lost
    inconsistent_dimensions = _trackcpp.Status_inconsistent_dimensions
    uninitialized_memory = _trackcpp.Status_uninitialized_memory
    findorbit_not_converged = _trackcpp.Status_findorbit_not_converged
    findorbit_one_turn_matrix_problem = _trackcpp.Status_findorbit_one_turn_matrix_problem
    file_not_found = _trackcpp.Status_file_not_found
    file_not_opened = _trackcpp.Status_file_not_opened
    kicktable_not_defined = _trackcpp.Status_kicktable_not_defined
    kicktable_out_of_range = _trackcpp.Status_kicktable_out_of_range
    flat_file_error = _trackcpp.Status_flat_file_error
    def __init__(self): 
        this = _trackcpp.new_Status()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _trackcpp.delete_Status
    __del__ = lambda self : None;
Status_swigregister = _trackcpp.Status_swigregister
Status_swigregister(Status)
string_passmethods = cvar.string_passmethods
pm_dict = cvar.pm_dict

class Plane(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Plane, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Plane, name)
    __repr__ = _swig_repr
    no_plane = _trackcpp.Plane_no_plane
    x = _trackcpp.Plane_x
    y = _trackcpp.Plane_y
    z = _trackcpp.Plane_z
    def __init__(self): 
        this = _trackcpp.new_Plane()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _trackcpp.delete_Plane
    __del__ = lambda self : None;
Plane_swigregister = _trackcpp.Plane_swigregister
Plane_swigregister(Plane)
string_error_messages = cvar.string_error_messages
string_version = cvar.string_version


def isfinite(*args):
  return _trackcpp.isfinite(*args)
isfinite = _trackcpp.isfinite

def get_timestamp():
  return _trackcpp.get_timestamp()
get_timestamp = _trackcpp.get_timestamp
# This file is compatible with both classic and new-style classes.

light_speed = cvar.light_speed
vacuum_permeability = cvar.vacuum_permeability
electron_charge = cvar.electron_charge
electron_mass = cvar.electron_mass
electron_rest_energy = cvar.electron_rest_energy
vaccum_permitticity = cvar.vaccum_permitticity
electron_rest_energy_MeV = cvar.electron_rest_energy_MeV
electron_radius = cvar.electron_radius

