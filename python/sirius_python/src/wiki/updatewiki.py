#!/usr/bin/python
# -*- coding: utf-8 -*-

import os
import sys
import pywikibot
import storage_ring
import booster
import linac
import linac_to_booster_transport_line
import booster_to_storage_ring_transport_line


bot_default_comment = ('Automatically generated by ' + os.path.basename(__file__))


def check_deps(parameters):
    names = [parameter.name for parameter in parameters]
    for parameter in parameters:
        msg = ''
        deps = parameter.deps
        for dep in deps:
            if dep not in names:
                if msg is '':
                    msg = str(parameter.name) + ': ' + str(dep)
                else:
                    msg += ', ' + str(dep)

        if msg is not '':
            print(msg)


def generate_parameter_name_list_page(label, parameters):
    #return
    wiki = []
    for parameter in parameters:
        name = parameter.name.replace(label+' ', '')
        name_capitalized = name[0].upper() + name[1:]
        line = '#[[Parameter:' + parameter.name + '|' + name_capitalized + ']]'
        wiki.append(line)
    
    site = pywikibot.Site('en', 'siriuswiki')
    page = pywikibot.Page(site, 'Machine:' + label + ' parameter name list')
    page.text = '\n'.join(wiki)
    page.save(bot_default_comment)
    
def generate_parameter_flat_list_page(label, parameters):
    wiki = []
    for parameter in parameters:
        name = parameter.name.replace(label+' ', '')
        name_capitalized = name[0].upper() + name[1:]
        wiki.append('=[[Parameter:'+parameter.name+'|'+name_capitalized+']]=')
        wiki.append("'''Data'''")
        wiki.append('{{#lst:Parameter:'+parameter.name+'|data}}')
        wiki.append("'''Observations'''")
        wiki.append('')
        wiki.append('{{#lst:Parameter:'+parameter.name+'|obs}}')
    site = pywikibot.Site('en', 'siriuswiki')
    page = pywikibot.Page(site, 'Machine:' + label + ' parameter flat list')
    page.text = '\n'.join(wiki)
    page.save(bot_default_comment)
    #print(page.text)
        
    
    
def generate_parameter_pages(parameters):
    #return
    site = pywikibot.Site('en', 'siriuswiki')  
    for parameter in parameters:
        page = pywikibot.Page(site, 'Parameter:'+parameter.name)
        page.text = parameter.create_wiki_page()
        page.save(bot_default_comment)
        #print(page.text)

def update_submachine(submachine, parameters_list = None):
    submachine.parameter_list.sort()
    if parameters_list is None:
        generate_parameter_pages(submachine.parameter_list)
        generate_parameter_name_list_page(submachine.label, submachine.parameter_list)
        generate_parameter_flat_list_page(submachine.label, submachine.parameter_list)
        return
    if len(parameters_list) == 0:
        return
    print('<'+submachine.label+'>')
    parm_names = [p.name for p in submachine.parameter_list]
    parameter_updated = False
    parameters_list.sort()
    for parameter in parameters_list:
        try:
            parameter_full_name = submachine.label + ' ' + parameter
            idx = parm_names.index(parameter_full_name)
            parm = submachine.parameter_list[idx]
            generate_parameter_pages([parm])
            #print(parm.name + ' updated.')
            parameter_updated = True
        except ValueError:
            print(parameter + ' not defined!')
    if parameter_updated:
        generate_parameter_name_list_page(submachine.label, submachine.parameter_list)
        generate_parameter_flat_list_page(submachine.label, submachine.parameter_list)
        #print('"Machine:'+submachine.label+' parameter name list" page updated.')
    

    
def update_all():
    update_submachine(submachine = storage_ring)
    update_submachine(submachine = booster)
    update_submachine(submachine = linac)
    update_submachine(submachine = linac_to_booster_transport_line)
    update_submachine(submachine = booster_to_storage_ring_transport_line)
    
def lists_all_parameters():
    submachine = storage_ring
    print('<'+submachine.label+'>')
    for i in range(len(submachine.parameter_list)):
        print('{0:03d}. {1}'.format(i+1, submachine.parameter_list[i].name))
    submachine = booster
    print('<'+submachine.label+'>')
    for i in range(len(submachine.parameter_list)):
        print('{0:03d}. {1}'.format(i+1, submachine.parameter_list[i].name))
    submachine = linac
    print('<'+submachine.label+'>')
    for i in range(len(submachine.parameter_list)):
        print('{0:03d}. {1}'.format(i+1, submachine.parameter_list[i].name))
    submachine = linac_to_booster_transport_line
    print('<'+submachine.label+'>')
    for i in range(len(submachine.parameter_list)):
        print('{0:03d}. {1}'.format(i+1, submachine.parameter_list[i].name))
    submachine = booster_to_storage_ring_transport_line
    print('<'+submachine.label+'>')
    for i in range(len(submachine.parameter_list)):
        print('{0:03d}. {1}'.format(i+1, submachine.parameter_list[i].name))
   

def print_help():
    print('NAME')
    print('      ' + sys.argv[0] + ' - updates Sirius wiki pages' )
    print('')
    print('SYNOPSIS')
    print('      ' + sys.argv[0] + ' [STRING1] [STRING2] [STRING3]...')
    print('')
    print('EXAMPLES')
    print('      ' + '1. updates all parameters in Sirius wiki:')
    print('      ' + sys.argv[0])
    print('')
    print('      ' + '2. updates all storage ring parameters:')
    print('      ' + sys.argv[0] + ' si')
    print('')
    print('      ' + '3. updates all booster parameters:')
    print('      ' + sys.argv[0] + ' booster')
    print('')
    print('      ' + '4. updates all linac parameters:')
    print('      ' + sys.argv[0] + ' linac')
    print('')
    print('      ' + '5. updates all linac to booster transport line parameters:')
    print('      ' + sys.argv[0] + ' tb')
    print('')
    print('      ' + '6. updates all booster to storage ring transport line parameters:')
    print('      ' + sys.argv[0] + ' ts')
    print('')
    print('      ' + '7. updates two storage ring parameters and one booster parameter:')
    print('      ' + sys.argv[0] + ' si "beam energy" circumference booster "horizontal tune"')
    print('')
    print('      ' + '8. lists all defined parameters.')
    print('      ' + sys.argv[0] + ' parameters')
    print('')
    
if __name__ == "__main__":
    
    if len(sys.argv) < 2:
        update_all()
    elif len(sys.argv) == 2:
        arg1 = sys.argv[1].lower()
        if arg1 == 'si':
            update_submachine(submachine = storage_ring)
        elif arg1 == 'booster':
            update_submachine(submachine = booster)
        elif arg1 == 'linac':
            update_submachine(submachine = linac)
        elif arg1 == 'tb':
            update_submachine(submachine = linac_to_booster_transport_line)
        elif arg1 == 'ts':
            update_submachine(submachine = booster_to_storage_ring_transport_line)
        elif arg1 == 'deps':
            pass
        elif arg1 == 'parameters':
            lists_all_parameters()
        else:
            print_help()
    else:
        submachine  = None
        parms_lists = {'si':[], 'booster':[], 'linac':[], 'tb':[], 'ts':[]}
        '''builds lists with parameters'''
        for arg in sys.argv[1:]:
            if arg == 'si':
                submachine = 'si'
            elif arg == 'booster':
                submachine = 'booster'
            elif arg == 'linac':
                submachine = 'linac'
            elif arg == 'tb':
                submachine = 'tb'
            elif arg == 'ts':
                submachine = 'ts'
            else:
                if submachine is None:
                    print_help()
                else:
                    parms_lists[submachine].append(arg)
        update_submachine(storage_ring, parms_lists['si'])
        update_submachine(booster, parms_lists['booster'])
        update_submachine(linac, parms_lists['linac'])
        update_submachine(linac_to_booster_transport_line, parms_lists['tb'])
        update_submachine(booster_to_storage_ring_transport_line, parms_lists['ts'])
                    
                
